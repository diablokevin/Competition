using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Data.Entity;
using Competition.EF.Models;
namespace Competition.Callout
{
    public partial class Form1 : DevExpress.XtraBars.Ribbon.RibbonForm
    {
        Competition.EF.Models.CompetitionDbContext dbContext = new Competition.EF.Models.CompetitionDbContext();
        public Form1()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
           
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.Schedules.LoadAsync().ContinueWith(loadTask =>
            {
    // Bind data to control when loading complete
    gridControl1.DataSource = dbContext.Schedules.OrderBy(s=>s.PlanBeginTime).ToList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());

            
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void barButtonItem1_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            
        }

        private void btn_Register_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            int rowhandle = gridView1.FocusedRowHandle;
            if(rowhandle!=-1)
            {
                int scheduleId = (int)gridView1.GetRowCellValue(rowhandle, "Id");
                Schedule schedule = dbContext.Schedules.Find(scheduleId);
                schedule.Status = SchedulStatus.Registered;
                dbContext.SaveChanges();
                gridView1.RefreshRow(rowhandle);
            }
           
           
            
        }

        private void btn_Register_Cancel_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            int rowhandle = gridView1.FocusedRowHandle;
            if (rowhandle != -1)
            {
              

                int scheduleId = (int)gridView1.GetRowCellValue(rowhandle, "Id");
                Schedule schedule = dbContext.Schedules.Find(scheduleId);
                if (schedule.Status == SchedulStatus.Registered)
                {
                    schedule.Status = SchedulStatus.Waiting;
                    dbContext.SaveChanges();
                    gridView1.RefreshRow(rowhandle);
                }
                else
                {
                    MessageBox.Show("此选手未签到!");
                }
            }
        }

        private void btn_Callout_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            int rowhandle = gridView1.FocusedRowHandle;
            if (rowhandle != -1)
            {
                

                int scheduleId = (int)gridView1.GetRowCellValue(rowhandle, "Id");
                Schedule schedule = dbContext.Schedules.Find(scheduleId);
                if (schedule.Status == SchedulStatus.Registered)
                {
                    schedule.Status = SchedulStatus.Calling;
                    dbContext.SaveChanges();
                    gridView1.RefreshRow(rowhandle);
                }
                else
                {
                    MessageBox.Show("此选手未签到!");
                }
            }
        }

        private void btn_Callout_Cancel_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            int rowhandle = gridView1.FocusedRowHandle;
            if (rowhandle != -1)
            {
              

                int scheduleId = (int)gridView1.GetRowCellValue(rowhandle, "Id");
                Schedule schedule = dbContext.Schedules.Find(scheduleId);
                if (schedule.Status == SchedulStatus.Calling)
                {
                    schedule.Status = SchedulStatus.Registered;
                    dbContext.SaveChanges();
                    gridView1.RefreshRow(rowhandle);
                }
                else
                {
                    MessageBox.Show("此选手未被呼叫!");
                }
            }
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            string racenum = txt_RaceNum.Text;
            Schedule next = dbContext.Schedules.Where(s =>s.Status==SchedulStatus.Waiting&&s.Competitor.Race_num == racenum).OrderBy(s => s.PlanBeginTime).FirstOrDefault();
            if(next!=null)
            {
                next.Status = SchedulStatus.Registered;
                lb_eventname.Text = next.Event.Name;
                lb_racenum.Text = next.Competitor.Race_num;
                lb_name.Text = next.Competitor.Name;
                lb_company.Text = next.Competitor.Company.Name;
                lb_begin.Text = next.PlanBeginTime.ToString();

                dbContext.SaveChanges();
                gridView1.RefreshData();
            }
            else
            {
                MessageBox.Show("无此选手的赛程信息!");
            }
        }
    }
}
