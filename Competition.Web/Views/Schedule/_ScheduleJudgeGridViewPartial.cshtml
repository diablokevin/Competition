@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "ScheduleJudgeGridView";
        settings.CallbackRouteValues = new
        {
            Controller = "Schedule",
            Action = "ScheduleJudgeGridViewPartial"
        };

        //settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Schedule", Action = "ScheduleJudgeGridViewPartialAddNew" };
        //settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Schedule", Action = "ScheduleJudgeGridViewPartialUpdate" };
        //settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Schedule", Action = "ScheduleJudgeGridViewPartialDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;
        settings.Width = Unit.Percentage(100);

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
        settings.EditFormLayoutProperties.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
        settings.EditFormLayoutProperties.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 600;
        settings.SettingsBehavior.AllowEllipsisInText = true;


        //settings.CommandColumn.Visible = true;
        //// settings.CommandColumn.ShowNewButtonInHeader = true;

        ////settings.CommandColumn.ShowDeleteButton = true;
        //settings.CommandColumn.ShowEditButton = true;
        //settings.CommandColumn.AdaptivePriority = 1;
        //settings.CommandColumn.MinWidth = 100;



        //settings.CommandColumn.Width = Unit.Percentage(18);

        settings.Columns.Add(c =>
        {
            c.Caption = "#";
            //c.Width = Unit.Pixel(250);
            c.AdaptivePriority = 1;
            c.SetDataItemTemplateContent(tc =>
            {

                Competition.EF.Models.SchedulStatus status = (Competition.EF.Models.SchedulStatus)DataBinder.Eval(tc.DataItem, "Status");
                switch (status)
                {
                    case Competition.EF.Models.SchedulStatus.Waiting:
                        ViewContext.Writer.Write("<span>未报到</span>");
                        break;
                    case Competition.EF.Models.SchedulStatus.Registered:
                        ViewContext.Writer.Write(
              Html.ActionLink("呼叫", "JudgeCallCompetitor", "Score", new { ScheduleId = DataBinder.Eval(tc.DataItem, "Id"), cmd = "call" }, new { @class = "btn btn-warning col-12", style = "color:white" })

                    );
                        break;
                    case Competition.EF.Models.SchedulStatus.Calling:
                        ViewContext.Writer.Write(
              Html.ActionLink("取消", "JudgeCallCompetitor", "Score", new { ScheduleId = DataBinder.Eval(tc.DataItem, "Id"), cmd = "cancel" }, new { @class = "btn btn-danger col-6", style = "color:white" }));
                        //ViewContext.Writer.Write("<span>  </span>");
                        ViewContext.Writer.Write(
                   Html.ActionLink("开始", "JudgeCallCompetitor", "Score", new { ScheduleId = DataBinder.Eval(tc.DataItem, "Id"), cmd = "inposition" }, new { @class = "btn btn-success col-6", style = "color:white" }));
                        break;
                    case Competition.EF.Models.SchedulStatus.Inprogress:
                    case Competition.EF.Models.SchedulStatus.Complete:
                        ViewContext.Writer.Write(
                Html.ActionLink("评分", "ScoreJudgeEditFormPartial", "Score", new { ScheduleId = DataBinder.Eval(tc.DataItem, "Id") }, new { @class = "btn btn-primary col-12", style = "color:white" })

                      );
                        break;

                };


            });
        });




        settings.KeyFieldName = "Id";

        settings.SettingsPager.Visible = true;

        settings.SettingsBehavior.AllowSelectByRowClick = true;


        settings.Columns.Add(c =>
        {
            c.FieldName = "Event.Name";
            c.AdaptivePriority = 3;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Competitor.Name";
            c.AdaptivePriority = 1;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Competitor.Race_num";
            c.AdaptivePriority = 1;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Competitor.Company.Name";
            c.Caption = "公司";
            c.AdaptivePriority = 2;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "PlanBeginTime";
            c.AdaptivePriority = 4;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "PlanEndTime";
            c.AdaptivePriority = 4;
        });


        settings.SetEditFormTemplateContent(c =>
        {
            Html.RenderAction("ScheduleJudgeEditFormPartial", new { Id = c.KeyValue });
        });


    });
    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()